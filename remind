#!/usr/bin/python3
import time, subprocess, sys, json, os

current_dir = os.path.realpath(".")
config_dir = f"{current_dir}/Scripts"
config_name = "SinRemind.json"
full_path_conf = f"{config_dir}/{config_name}"

def initRemind():
    def create_config():
        data = [
            {
                "min_time":"",
                "max_time":"", 
                "title":"", 
                "task":""
                }
            ]
        with open(full_path_conf, 'w') as file:
            json.dump(data, file, indent=4)

    if not os.path.exists(config_dir) or not os.path.exists(full_path_conf):
        os.makedirs(config_dir, exist_ok=True)
        create_config()
        print(f"Добавь расписание в конфиг {full_path_conf}")
        update = (
                f'notify-send "Нет расписания!"'
                f' "Заполни файл конфигурации {full_path_conf}"'
                )
        run_command(command=update)
        return False

    else:
        return True

def CurrentTime():
    current_time = time.strftime("%H:%M")
    hour, minutes = current_time.split(":")
    return int(hour), int(minutes)

def GetUserTime(user_time:str):
    user_hour, user_minutes = user_time.split(":")
    if  user_minutes == "00":user_minutes = 0
    return int(user_hour), int(user_minutes)


def count_time(hour:int, minutes:int):
    result = hour * 60 + minutes
    return result

def Remind(min_time:str=None, max_time:str=None, title:str=None, task:str=None):
    try:
        params = sys.argv
        if len(params) == 3:
            if min_time == None and max_time == None:
                min_time, max_time = params[1], params[2]

        elif min_time != None and max_time != None: 
            min_user_hour, min_user_minutes = GetUserTime(user_time=min_time)
            max_user_hour, max_user_minutes = GetUserTime(user_time=max_time)

            current_hour, current_minutes = CurrentTime()
        
            try:
                if title != None and task != None:
                    text_title = title
                    text_body = task
                if title == None and task == None:
                    text_title = f"Сверься с расписанием!"
                    text_body = f"Проверь с {min_time} по {max_time}"

                command = f'notify-send "{text_title}" "{text_body}"'

                min_count = count_time(hour=min_user_hour, minutes=min_user_minutes) 
                max_count = count_time(hour=max_user_hour, minutes=max_user_minutes)
                current_count = count_time(hour=current_hour, minutes=current_minutes)

                if min_count <= current_count <= max_count:
                    print(f"{text_title}\n{text_body}")
                    run_command(command=command)
            except Exception as err:
                print(err)
        else:
            print("Проверь *_time в конфигe/параметрах")
    except IndexError:
        print(
                "Необхдимо передать параметры в Remind!\n"
                "Смотри https://github.com/rickert156/HomeScripts"
                )
    except ValueError as err:
        print(
                f"{err}\tНеобходимо правильно передать параметры!\n"
                "Смотри https://github.com/rickert156/HomeScripts"
                )


def run_command(command:str):
    subprocess.run(command, shell=True)

def readRemind(config:str):
    with open(config, 'r') as file:
        data = json.load(file)

    return data

if __name__ == '__main__':
    status = initRemind()
    if status == True:
        params = sys.argv
        if '--full-list' in params:
            """Тут будем читать JSON и сверяться с ним"""
            full_list = readRemind(config=full_path_conf)
            for info in full_list:
                min_time = info["min_time"] 
                max_time = info["max_time"]
                title = info["title"]
                task = info["task"]
                Remind(min_time=min_time, max_time=max_time, title=title, task=task)
        else:
            Remind()
